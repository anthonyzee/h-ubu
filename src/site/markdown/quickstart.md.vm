Quickstart
========

This page explains how to get started with H-Ubu in 10 minutes. Let's imagine a really simple [application](quickstart/demo.html):

![A simple demo](demo.png "A simple demo")

**Note:** To see the demo, use either Chrome, Safari or Firefox with Firebug.

So, nothing complex: two buttons, a message. The traditional JavaScript way to do that would be to write all the
JavaScript in the HTML file, which is exactly what H-Ubu will **NOT** do. Why not? Because that would mean:

 * dealing with HTML DOM modifications (and directly accessing the HTML DOM)
 * dealing with Ajax calls and server communication
 * dealing with state control

In one script! This code is then untestable. It's probably the best recipe for *spaghetti* there is. Imagine this in a
bigger application with a fancy UI! It would become totally uncontrollable.

Let's see the H-Ubu way to achieve the same thing
-------------------------------------------------------------

 * We define a backend component to deal with the server, which publishes a service.
 * We define a frontend component that uses the backend service to modify the HTML page.
 * We define our application by registering these two components, configuring them and letting H-Ubu bind them.

The clear advantages are:

 * The code is modular, and without visibility issues. Only the public contract is accessible from the frontend.
 * The configuration allows us to give #ids and .classes into components and avoid coupling the JavaScript code to the page DOM.
 * Components are testable.

The Application Composition
------------------------------------
The first thing to do, is to compose the application:


    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
        <title>H-Ubu Demo</title>

            <script src="http://code.jquery.com/jquery-latest.js"> </script>
            <!-- (1) -->
            <script type="text/javascript" src="hubu-all.js"></script>
            <!-- (2) -->
            <script type="text/javascript" src="backendComponent.js"></script>
            <script type="text/javascript" src="frontendComponent.js"></script>

            <!-- The contracts -->
            <script type="text/javascript" src="UserServiceContract.js"></script>

           <script type="text/javascript">
            <!-- (3) -->
            $(document).ready(function(){
                // Component registrations
                <!-- (4) -->
                hub
                    .registerComponent(backendComponent, {
                        component_name: 'user'
                    })
                    .registerComponent(frontendComponent, {
                        loginId : '#login',
                        logoutId : '#logout',
                        statusId : '#status',
                        component_name: 'frontend'
                    })
                    <!-- (5) -->
                    .start();
            });
            </script>
    </head>

First we import H-Ubu (1). jQuery is also imported (being a component dependency) (we can use any JavaScript library),
and finally so are our components (2) and the contract. This contract is implemented by the backend component, and
required by the frontend component.

When the page is loaded (3), we register our components (4) on a special H-Ubu object: <tt>hub</tt>. This is the
**central nervous system** of the application.

As you can see, components are registered with configurations. The `component_name` is a specific property to name your
component. The frontend component also receives the HTML ids to manipulate the page indirectly.

Finally we start the hub (5), i.e. the application.

How is the binding between components done? Let's see how components are developped.

The User Service Contract
-------------------------------
The components interact using a _contract_. This contract is a simple JavaScript object, generally containing only
_body-less_ functions. This specifies what can be used from the component and how it can be used. For our simple
application, the contract is the following:

	/**
	 * User Service Contract definition.
	 * The implementations are empty,
	 * like a Java interface.
	 */
	var UserServiceContract = {
	    /**
	     * Checks if the user is logged in.
	     */
	    isLoggedIn : function() { },

	    /**
	     * Get the logged-in user.
	     */
	    getUser : function() { },

	    /**
	     * Ask to log in.
	     * This method simulates an async call
	     * and so returns immediately.
	     * @param {String} name
	     */
	    login: function(name) { },

	    /**
	     * Ask to log out.
	     * This method simulates an async call.
	     * and so returns immediately.
	     */
	    logout: function() { }
	}

Backend component
-------------------------
The backend component simulates a user login. It publishes the _UserServiceContract_, and so implements it.

Although we recommend using the JavaScript module pattern, we use a simple JavaScript object here for simplicity's sake.
Don't forget that H-Ubu will deal with the visibility issue, so other components can only access the contract part.

    		var backendComponent = {

			    hub: null,
			    isUserLoggedIn: false,
			    user: null,

			    // First we are a component, so we need to implement the 4 methods required to be a valid component:

			    /**
			     * Method returning the component <b>unique</b>
			     * name. Using a fully qualified name is encouraged.
			     * @return the component unique name
			     */
			    getComponentName: function() {
			        return 'backend-component';
			    },

			    /**
			     * Configure method. This method is called when the
			     * component is registered on the hub.
			     * @param theHub the hub
			     */
			    configure: function(theHub) {
			        this.hub = theHub;
					// We provide the UserContractService:
					this.hub.provideService({
						component: this,
						contract: UserServiceContract
					});
			    },

			    /**
			     * The Start function
			     * This method is called when the hub starts or just
			     * after configure if the hub is already started.
			     */
			    start: function() {},

			    /**
			     * The Stop method is called when the hub stops or
			     * just after the component removal if the hub is 
			     * not stopped. No events can be send in this method.
			     */
			    stop: function() {},

			    // Now the UserServiceContract implementation:

			    /**
			     * Checks if the user is logged in.
			     */
			    isLoggedIn: function() {
			        return this.isUserLoggedIn;
			    },

			    /**
			     * Get the logged user.
			     */
			    getUser: function() {
			        return this.user;
			    },

			    /**
			     * Ask to log in.
			     * This method simulates an async call
			     * and so returns immediately.
			     * @param {String} name
			     */
			    login: function(name) {
					// Because setTimeout calls the method on the global object (window),
					// we use a closure.
					var self = this;
			        setTimeout(function() { self.loggedIn(name); }, 2000);
			        return;
			    },

			    /**
			     * Ask to log out.
			     * This method simulates an async call,
			     * and so returns immediately.
			     */
			    logout: function() {
					var self = this;
			        setTimeout(function() { self.loggedOut(); }, 1000);
			        return;
			    },


			    // We have two internal/private methods sending events

			    /**
			    * This method is called 2 seconds after the login request.
			    * It's used to inform the hub that the login was successful.
			    */
			    loggedIn: function(name) {
			        this.isLoggedIn = true;
			        this.user = name;
			        // We send an event notifying other components that we're logged in.
			        this.hub.publish(this, "/user/login", {
			            loggedIn: true
			        });
			    },

			    loggedOut: function() {
			        this.isLoggedIn = false;
			        this.user = null;
			        // We send an event notifying other components that we're logged out.
			        this.hub.publish(this, "/user/login", {
			            loggedIn: false
			        });
			    },
			}

As it's a component, it must implement the 4 methods required to be a valid component:

* configure: receives the external configuration, declares the required and provided services
* start: the component is started, and so can start do stuff
* stop: the component is stopped
* getComponentName: returns the name of the component

In the _configure_ method, we declare that we're providing the _UserServiceContract_ service.

Then the component implements the _UserServiceContract_. To simulate an Ajax call, the application uses 'setTimeout'.
When the function is really invoked, it sends an event (`hub.sendEvent(component, {loggedIn : false});`. Components
registering a listener matching this event will automatically be called.

Frontend component
--------------------------
The backend component simulates server calls. The frontend component deals with the HTML page modification. To avoid
being tied to one specific HTML page, the manipulated ids are passed inside the component configuration.

	var frontendComponent = {

	    hub: null,

	    /**
	    * The login button id
	    */
	    loginId: null,

	    /**
	    * The logout button id
	    */
	    logoutId: null,

	    /**
	    * The status message id
	    */
	    statusId: null,

	    /**
	    * The user service
	    */
	    userService: null,

	    //*********************//
	    // Component Interface //
	    //*********************//
	    /**
	    * Method returning the component's <b>unique</b>
	    * name. Using a fully qualified name is encouraged.
	    * @return the component unique name
	    */
	    getComponentName: function() {
	        return 'frontend-component';
	    },

	    /**
	    * Configure method. This method is called when the
	    * component is registered on the hub.
	    * @param theHub the hub
	    * @param configuration the configuration
	    */
	    configure: function(theHub, configuration) {
	        this.hub = theHub;

	        // Configuration
	        this.loginId = configuration.loginId;
	        this.logoutId = configuration.logoutId;
	        this.statusId = configuration.statusId;

	        // We require the UserServiceContract, it will be injected in the 'userService' field.
	        this.hub.requireService({
	            component: this,
	            contract: UserServiceContract,
	            field: "userService"
	        });

	    },

	    /**
	    * The Start function
	    * This method is called when the hub starts or just
	    * after configure if the hub is already started.
	    */
	    start: function() {
	        // The first thing to do is to get the user service and ask if we're
	        // logged in
			console.dir(this.userService);
	        var state = this.userService.isLoggedIn();

	        this.updateStatus(state);

	        // Then, we register a listener
	        this.hub.subscribe(this, "/user/login", this.callback);

	        // Finally, we bind on the click event
			svc = this.userService;
	        $(this.loginId).click(function() {
	            svc.login('bla');
	        });

	        $(this.logoutId).click(function() {
	            svc.logout();
	        });
	    },

	    /**
	    * The Stop method is called when the hub stops or
	    * just after the component removal if the hub is 
	    * not stopped. No events can be sent in this method.
	    */
	    stop: function() {

	        },

	    /**
	    * Function called when we receive an event
	    */
	    callback: function(event) {
	        console.log("receive an event " + event.topic + " - " + event.loggedIn);
	        this.updateStatus(event.loggedIn);
	    },

	    updateStatus: function(logged) {
	        if (logged) {
	            $(this.statusId).html('We are logged in').css('color', 'green');
	        } else {
	            $(this.statusId).html('We are not logged in').css('color', 'red');
	        }
	    }

	}
	

The component code is structured like the backend component. However, the configure method receives the configuration
and the HTML ids are retrieved from the configuration object. We also declare a required service injected within the
`userServiceContract` field.

In the start function, the component registers a listener by giving a 'match' method and a 'callback' method. The match
method is called to check if the component is interested in the event. If this method returns `true`, the 'callback'
method is invoked. It also directly uses the service to initiate the state. The method uses jQuery to set a handler on
the button. To register the handler, it uses the ids given in the configuration.

When the login is completed, the 'callback' method is called (thanks to the listener), and the status message is updated.

Results
=====

Ok, it's a simple application. But it has shown how you can modularize your application with components, bind them using
services and use the event mechanism.
