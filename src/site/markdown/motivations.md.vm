Motivations and Concepts
===================

A Bit of History
------------------
During the development of a project relying on JavaScript, we realized that the growth of the JavaScript code decreased
our efficiency. Not because JavaScript is verbose, but because the application's UI had begun to grow large and complex.

Without good practices, this JavaScript code started to become really messy, and close to unmanageable.

These issues arose for several reasons:

 * We were not JavaScript experts.
 * JavaScript is great and gives developers a lot of flexibility... but too much flexibility is evil!
 * Playing with function pointers is great... but may break a layered architecture.
 * JavaScript relies heavily on asynchronous callbacks, as async implies spaghetti (if you're not convinced, take a look
   at ESBs).
 * JavaScript is not modular, and in fact, generally winds up as one big JavaScript file. Obviously, concurrent 
   development on one file is bad.
 * JavaScript does not have an interface concept, making it hard to understand public API and implementation details.
 * No scoping: in JavaScript, everything is public by default... great for naming conflicts.
 * No tests: well... what to test and how to test it?

So after reflection, we looked at how to try and improve that. Using JavaScript libraries like jQuery and Dojo automates
a lot of common tasks, simplifies code writing, and manages browser heterogeneity, but **DOES NOT HELP TO ARCHITECT THE CODE**.

As for Java, having a framework enforcing design rules was definitely required. And so, we created H-Ubu...

H-Ubu's Concepts
--------------------
H-Ubu could be seen as a _service-oriented component model_, such as Apache Felix iPOJO for OSGi. Actually, it reuses a 
lot of concepts from OSGi and iPOJO. 

With H-Ubu, your application is composed of *components*. Components are plugged into a *hub*, coordinating and managing
the plugged-in components. Components use _services_ and _events_ to interact.  _Services_ are functionalities published
by a component and so usable by others. _Services_ are described using a _contract_; so a kind of Java interface.
_Events_ are sent on topics listened to by other components. Although we try to avoid direct binding, to be able to
subsitute components later, it is also possible to do _direct bindings_.

Components follow a simple lifecycle: configure -> start -> stop. In the _configuration_ phase the component describes
itself (in terms of provided services and dependencies). It also receives an external configuration, containing for
example the element IDs (from the DOM). It improves the reuse of components across pages. In the _started_ phase the
component initializes itself to be ready to be used. Service dependencies are available, and the component can be used.
Finally, in the _stopped_ phase, the component does some cleanup. It cannot be used anymore.
