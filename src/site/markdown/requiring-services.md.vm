Service Dependencies
===============

Required services are modeled as service dependencies. Each service dependency targets a specific _contract_ and can be:

* mandatory / optional : mandatory dependencies impact the published services; optional ones do not.
* scalar / aggregate : aggregate dependencies are bound to all matching providers; scalar ones are bound to only one.
* filtered : filtered dependencies select the providers.

Service dependencies are injected either within fields or using _bind_ / _unbind_ methods.

Requiring Services
==============

To require a service and receive the service object automatically, you need to describe a service dependency
specifying the required contract, the service filter, how the service object/s is/are injected and so on.

    hub.requireService({
        component: cmp,
        contract : contract,
        filter : function(ref) {
            return ref.getProperty("lg") === "fr";
        },
        field : "mysvc"
    });

This instructs H-Ubu to inject the service `contract` with the property `lg` set to `fr` into the field `mysvc` of
the component (`cmp`). This dependency is (by default) mandatory and scalar (only one service injected).

A component can directly declare the same dependency in its `configure` method:

    configure : function(hub, conf) {
        hub.requireService({
            component: this,
            contract : contract,
            filter : function(ref) {
                return ref.getProperty("lg") === "fr";
             },
            field : "mysvc"
        });
    }

Dependencies can be:

* _scalar_ or _aggregate_ : Aggregate dependencies are bound to all matching services.
* _mandatory_ or _optional_: Once unresolved, mandatory dependencies instruct H-Ubu to unregister all the published 
  services provided by the same instance until the dependency is resolved again.

Field Injection
===========
Services are automatically injected by H-Ubu. They can be injected within field and bind/unbind methods.

Field injection is really easy to use. It just requires the service dependency to specify the field into which the
service should be injected:


    var component = {
        svc : null,  // The injected service.
    	configure: function(hub) {
    	    hub.requireService({
    	        component: this,
    	        contract : myContract,
    	        field : "svc"
    	    });
    	},
    	// ...
    };
    
The `svc` field receives the value automatically.

For aggregate dependencies, an array is used:

    var component = {
        svc : [],  // The injected services.
    	configure: function(hub) {
    	    hub.requireService({
    	        component: this,
    	        contract : myContract,
    	        field : "svc",
    	        aggregate : true
    	    });
    	},
    	// ...
    };
    
The array is automatically populated.

Bind / Unbind Injection
=================

The second injection mechanism uses two methods: a method to inject the new service (_bind_) and a method for handling
the departure of the service (__unbind_). This injection mechanism is used when you want to deal with the dynamism yourself.

    var component = {
        svc : null,
    	configure: function(hub) {
    	    hub.requireService({
    	        component: this,
    	        contract : myContract,
    	        bind : this.bindMyService,
    	        unbind : this.unbindMyService
    	    });
    	},
    	
    	bindMyService: function(svc) {
    		this.svc = svc;
    	},
    	unbindMyService: function(svc) {
    		this.svc = null;
    	},
    	
    	// ...
    };

The callbacks receive the service object as the first parameter, and the service reference as the second parameter. The
service reference lets you check the service properties with the `getProperty` method.

For aggregate dependencies, the bind method will be called once per provider.

Using filters
=========

Service dependencies can be filtered. The filter lets you select the service you really want based on the service properties.

To use filters, add a `filter` method to the service dependency. This method receives the service reference to be
checked as a parameter and should return `true` if the service matches, `false` otherwise:

    configure : function(hub, conf) {
        hub.requireService({
            component: this,
            contract : contract,
            filter : function(ref) {
                return ref.getProperty("lg") === "fr";
             },
            field : "mysvc"
        });
    }
        

Mandatory vs. Optional
=================

Mandatory dependencies impact the services published by the component. So, as soon as a mandatory service dependency is
unresolved, the published services are unregistered. They will be re-registered once all dependencies become resolved again.

Optional dependencies do not impact the published services. However, you must be careful when using an optional service
as it must not contain the following values:

* `null` for scalar dependency
* an empty array for aggregate dependency

LocateService
=============

Service dependencies don't have to be injected, but actually can be _located_. You can even locate dependencies from
others component if you have access to the reference on this other component.

    configure : function(hub, conf) {
        hub.requireService({
            component: this,
            contract : contract,
            name : "my-dependency"
        });
    }

    doSomething : function() {
        var svc = hub.locateService(this, name);
        if (svc !== null) {
            svc.doSomething();
        }
    }

There are two methods to locate services:

* `locateService(component, name)` : returns the service object of the dependency named `name` on the component
`component`. Returns `null` if there is no provider for this dependency. Throws an exception if `component` does not
have a dependency named `name`
* `locateServices(component, name)` : returns all service objects of the dependency named `name` on the component
`component`. Returns `[]` if there is no provider for this dependency. Throws an exception if `component` does not
have a dependency named `name`

Notice that when using `locateServices` on a scalar (not aggregate) dependency you receive either an empty array (no
provider) or an array of one element. When calling `locateService` on an aggregate dependency,
you get only the first element (`null` if no provider).

A dependency without field and bind method must have a name to be valid. Such dependencies are necessary optional.

