Change the way you're building JavaScript application
======================================================

JavaScript code is hard to scale, even with good patterns. You can build modular JavaScript application with require
.js and other loaders, but communications between modules is static, always using function call (no events) and
strongly-coupled (you require a specific module).

JavaScript could be considered the poor-child of web app technologies. The toolset for JavaScript is very limited
compared to that of Java. Unit testing, static analysis and managed execution are new to JavaScript. However, the
flexibility and the design of the language makes these tools a stringent requirement for code scalability -- especially
in recent years, since JavaScript has become mainstream and is now used by many web app stacks.

We faced big challenges when our JavaScript application's size grew up to 60K lines of code. So, we decided to reuse
what we're used to doing in Java and other languages: loosely-coupled autonomous components. We implemented H-UBU as a
component framework for JavaScript, created to address the above issues.

With h-ubu, you compose your application with components. JavaScript componentization aims to modularize JavaScript
code in order to improve the testability, maintainability and scalability of JavaScript applications. Components are
bound together automatically. You neve depends on a specific implementation, but on a _contract_.

What's in the box ?
===================

* Component definition: the application is built with components. They can be package within AMD or CommonJS modules.
* Service-orientation: h-ubu is based on services. Components provide and require services.
* Contract-based interactions: components implement and use contracts (i.e. interfaces, service specifications)
* Synchronous and asynchronous component communication: components can interact using method calls and events.
* Architecture description: the application is composed by registering components. The runtime binds them.
* Component configuration: components can be configured -- no #id in your code anymore.
* Test: components are testable using Jasmine or QUnit.
* Component separation: components are developed in separate files; the application code is much more scalable.
* jQuery, CoffeeScript, MooTools, require.js, node.js: use any technology you want!

Download, Fork and so on
========================

You can download the h-ubu library on the [download area](https://github.com/nano-project/h-ubu/downloads) or
from here:

 * normal version : [hubu-all.js](https://github.com/downloads/nano-project/h-ubu/hubu-all.js)
 * minified version : [hubu-all-min.js](https://github.com/downloads/nano-project/h-ubu/hubu-all-min.js)

The h-ubu is hosted on github: [https://github.com/nano-project/h-ubu](https://github.com/nano-project/h-ubu). Feel
free to fork it and start contributing. You can also open [issues](https://github.com/nano-project/h-ubu/issues) and
 of course, submit pull requests.


License
=======
h-ubu is licensed under the Apache License 2.0. The project was initially founded by [akquinet A.G.](http://www
.akquinet.de/en), but is now founded by [Arrow-Group](http://arrow-group.eu).

