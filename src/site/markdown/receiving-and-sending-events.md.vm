Sending and Receiving Events
=====================

H-Ubu also allows components to interact using events.  Events are simple key/value objects. They can follow a contract but
this is not enforced by H-Ubu. 

Sending events using topics
-----------------------------------

H-Ubu's eventing system is based on topics. Components can subscribe to topics and publish events on topics. 

 * components subscribe to a topic name (regular expression) and specify a callback method to be called when an event 
   is sent on that topic
 * components publish events to a topic
 * H-Ubu dispatches the event to matching subscribers, and calls the callback methods

To publish an event, a component must use:

    hub.publish(component, topic, event);

where `component` is a reference to itself, `topic` is the topic name (String) and `event` is the event (Object).

To subscribe to a topic, a component uses:

    hub.subscribe(component, topic, callback);
    hub.subscribe(component, topic, callback, filter);


where `component` is a reference to itself, `topic` is a regular expression (String) on the topic name (this can just
be the topic name), and `callback` is the method called on the component (with the event as a parameter). The second
method adds a `filter` parameter. This parameter is a function to select events. Only events sent to the correct topic
**and** matching the filter function will be sent to the callback. The filter function must return either `true` or `false`.


    // Subscription to the /foo/bar topic
    hub.subscribe(this, "/foo/bar", callback);

    // Subscription to the /foo/* topic (all sub-topics)
    hub.subscribe(this, "/foo/(.)*?", callback);

    // Subscription with a filter
    hub.subscribe(this, "/foo/bar", callback, function(event) {
        return event.x == y;
    });

    // Publication
    hub.publish(this, "/foo/bar", {x : y};

The `event.topic` property is added to the event.

Sending and receiving events without topics
-----------------------------------------------------
Components can interact using events without using topics. Even if this version looks a bit simpler, we recommend using
topics in order to benefit from a looser coupling:

To send an event, a component can just call:

    hub.sendEvent(theComponent, theEvent);

`theComponent` is a reference to the component sending the event. `theEvent` is a JavaScript object.

Event reception is a multi-step process. First, the component must register a listener by using:

    hub.registerListener(theComponent, theMatchMethod, theCallbackMethod)

`theComponent` is a reference to the component that wants to receive the event. `theMatchMethod` is a function (can be
a pointer) defining the events to receive. `theCallbackMethod` is a function (can be a pointer) receiving the event.

So, when an event is sent, the match methods from all listeners are called to check if the event needs to be delivered
to the listener. The match method must return true or false:

    function match1(event) {
         return true; // Accept all events
    }

    function match2(event) {
        // Accept only events matching the contract
        return HUBU.UTILS.isObjectConformToContract(contract);
    }

    function match3(event) {
        // Accept events coming from aComponent
        return event.source == aComponent;
    }

    function match4(event) {
        // Accept events coming from a component named 'c'
        return event.source.getComponentName() == 'c';
    }

    function match5(event) {
        // Accept events containing 'logged = true'
        return event.logged != null && event.logged;
    }


When a match method returns `true`, H-Ubu calls the associated callback method. Note that a component cannot receive
events sent by itself.

Event Source
----------------
H-Ubu adds to all events a property called `source` referencing the component sending the event.

Event Cloning
----------------
To prevent listeners from modifying events, the match and callback methods receive a clone of the event.

However you can disable this behavior by setting `event.clone` to `false`. This can be useful on big events,
or to avoid loops during the cloning.

    hub.sendEvent(this, {
        game : "ping" // Cloned by default
    });
    hub.sendEvent(this, {
        game : "pong",
        clone : false // Not cloned
    });

Receivers can check the same property to know if the event was cloned or not.

Summary
-----------

 * components register a listener on the hub and pass the match and callback methods
 * components send events to the hub
 * h-ubu calls the match methods
 * For all match methods accepting the event, h-ubu calls the associated callback method

