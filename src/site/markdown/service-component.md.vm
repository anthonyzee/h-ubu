Service-Oriented Components
============================

This page explains how to make a H-Ubu component a `service component`, i.e. a component requiring and providing
services, allowing loosely-coupled dynamic bindings.

Concepts
--------
Using service components has several benefits. So orientated, components interact using only
_service specifications_ (`contracts`), making service providers substitutable. The binding is dynamic and so you can
switch providers at runtime.

However, manual development of service-oriented components is error-prone and complex. So H-Ubu provides an extension
dealing with most of the concerns and so letting you focus on the component logic only. As an example, required services
are injected automatically within methods or members of the component, while service publication is also automated.

Description
-----------

The component needs to describe itself to tell H-Ubu what its required and provided services are. This
description is done using an API, either by an external tier or by the component itself. In this latter case,
we recommend implementing the description within the `configure` method.

Requiring Services
------------------

To require a service and receive the service object automatically, you need to describe a service dependency
specifying the required contract, the service filter, how the service object(s) is/are injected and so on.

    hub.requireService({
        component: cmp,
        contract : contract
        filter : function(ref) {
            ref.getProperty("lg") === "fr";
            }
        field : "mysvc"
    });

This instructs H-Ubu to inject the service `contract` with the property `lg` set to `fr` into the field `mysvc` of
the component (`cmp`). This dependency is (by default) mandatory and scalar (only one service injected).

A component can directly declare the same dependency in its `configure` method:

    configure : function(hub, conf) {
        hub.requireService({
            component: cmp,
            contract : contract
            filter : function(ref) {
                ref.getProperty("lg") === "fr";
                }
            field : "mysvc"
        });
    }

Dependencies can be:

* _scalar_ or _aggregate_: Aggregate dependencies are bound to all matching services.
* _mandatory_ or _optional_: Once unresolved, a mandatory dependency instructs H-Ubu to unregister all services
  provided by the same instance until the dependency is resolved again.

Dependencies can be injected within fields or using _bind/unbind_ methods. Field injection is the easiest,
as H-Ubu injects the service within the given field. For aggregate dependencies, the array is populated with the
matching services:


    var component = {
        services = [],
        service = null,

        configure : function(hub) {
            this.hub = hub;
            // Scalar dependency
            this.hub.requireService({
                component: this,
                contract: contract,
                field: "service"

            });

            // Aggregate dependency
            this.hub.requireService({
                component: this,
                contract: contract,
                aggregate : true,
                field: "services"
            });
        },

        //...

        doSomething : function() {
             var i = 0;
             service.doSomethingWithTheService();
             for (; i < services.length; i++) {
                services[i].doSomethingWithTheService();
             }
        }
    };

Using bind and unbind methods allows you to be notified when a new service appears and when a service disappears:

    var component = {
            services = [],
            service = null,

            configure : function(hub) {
                this.hub = hub;
                // Scalar dependency
                this.hub.requireService({
                    component: this,
                    contract: contract,
                    bind: component.bind,
                    unbind: component.unbind
                });
            },

            bind : function (svc) {
                this.service = svc;
            },

            unbind : function (svc) {
                if (this.service === svc) {
                    this.service = null
                }
            },


            //...

            doSomething : function() {
                 service.doSomethingWithTheService();
            }
        };

The bind and unbind methods receive the service object and, as a second argument, the service reference.

Publishing Services
-------------------




Dynamism
--------


Modifying published services
----------------------------

