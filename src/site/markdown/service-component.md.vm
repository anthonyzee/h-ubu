Service-Oriented Components
============================

This page explains how to make h-ubu components `service component`, i.e. component requiring and providing services
allowing loose-coupled dynamic bindings.

Concepts
--------
Using service components has several benefits. With such orientation, components does interacts together only using
_service specification_ (`contract`) making service provider subtituable. The binding is dynamic and so you can
switch providers at runtime.

However, manual development of service-oriented components is error-prone and complex. So H-UBU provides an extension
 dealing with most of the concerns and so let you focus on the component logic only. As an example,
 required services are injected automatically within methods or members of the component,
 while service publication is also automated.

Description
-----------

The component needs to describe itself to tell H-UBU what are the required services and provided service. This
description is made using a API, either by an external tiers or by the component itself. In this latter case,
we recommend implementing the description within the `configure` method.

Requiring Services
------------------

To require a service and to receive the service object automatically, you need to describe a service dependency
specifying the required contract, the service filter, how the service object(s) is/are injected and so on.

    hub.requireService({
        component: cmp,
        contract : contract
        filter : function(ref) {
            ref.getProperty("lg") === "fr";
            }
        field : "mysvc"
    });

This instructs h-ubu to inject the service `contract` with the property `lg` set to `fr` into the filed `mysvc` of
the component (`cmp`). This dependency is (by default) mandatory and scalar (only one service injected).

A component can directly declare the same dependency in his `configure` method:

    configure : function(hub, conf) {
        hub.requireService({
            component: cmp,
            contract : contract
            filter : function(ref) {
                ref.getProperty("lg") === "fr";
                }
            field : "mysvc"
        });
    }

Dependencies can be:

* _scalar_ or _aggregate_ : Aggregate dependencies are bound to all matching services.
* _mandatory_ or _optional_: Once unresolved, mandatory dependencies instructs H-UBU to unregisters all the published
services provided by the same instance until the dependency is resolved again.

Dependencies can be inject withing fields or using _bind/unbind_ methods. Field injection is the easiest,
as H-UBU injects the service within the given field. For aggregate dependencies the array is populated with the
matching services:


    var component = {
        services = [],
        service = null,

        configure : function(hub) {
            this.hub = hub;
            // Scalar dependency
            this.hub.requireService({
                component: this,
                contract: contract,
                field: "service"

            });

            // Aggregate dependency
            this.hub.requireService({
                component: this,
                contract: contract,
                aggregate : true,
                field: "services"
            });
        },

        //...

        doSomething : function() {
             var i = 0;
             service.doSomethingWithTheService();
             for (; i < services.length; i++) {
                services[i].doSomethingWithTheService();
             }
        }
    };

Using bind and unbind methods let you be notified when a new service is arriving and when a service is leaving:

    var component = {
            services = [],
            service = null,

            configure : function(hub) {
                this.hub = hub;
                // Scalar dependency
                this.hub.requireService({
                    component: this,
                    contract: contract,
                    bind: component.bind,
                    unbind: component.unbind
                });
            },

            bind : function (svc) {
                this.service = svc;
            },

            unbind : function (svc) {
                if (this.service === svc) {
                    this.service = null
                }
            },


            //...

            doSomething : function() {
                 service.doSomethingWithTheService();
            }
        };

Bind and Unbind method receives the service object and as second argument the service reference.

Publishing Services
-------------------




Dynamism
--------


Modifying published services
----------------------------

